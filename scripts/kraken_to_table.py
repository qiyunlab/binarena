#!/usr/bin/env python3
"""Convert Kraken taxonomic profile into a taxon-by-rank table.

Examples:
    python me.py -i kraken.output -r kraken.report -o taxonomy.tsv
    python me.py -i kraken.output -d taxdump_dir -o taxonomy.tsv
    zcat kraken.output.gz | python me.py -r kraken.report > taxonomy.tsv

Notes:
    `-i` is the mapping of query sequences to taxonomic IDs, generated by
    Kraken. It can be supplied as a parameter or standard input.

    Either `-r` or `-d` is necessary to inform the taxonomic hierarchy of
    organisms. `-r` is the Kraken-generated report file. `-d` is a directory
    containing NCBI taxonomy dump files "nodes.dmp" and "names.dmp".

    Output table file can be designated by `-o` or standard output.
"""

import sys
import argparse
from os.path import join, isdir, isfile
from functools import partial, lru_cache


codes = {'D': 'domain',
         'P': 'phylum',
         'C': 'class',
         'O': 'order',
         'F': 'family',
         'G': 'genus',
         'S': 'species'}

ranks = list(codes.values())


def parse_args():
    """Command-line interface.
    """
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter)
    arg = parser.add_argument
    arg('-i', '--input', type=argparse.FileType('r'), default=sys.stdin,
        help='Kraken output file, default: stdin')
    arg('-r', '--report', type=argparse.FileType('r'),
        help='Kraken report file')
    arg('-d', '--taxdump',
        help='NCBI taxdump directory')
    arg('-o', '--output', type=argparse.FileType('w'), default=sys.stdout,
        help='output table file, default: stdout')
    for arg in parser._actions:
        arg.metavar = ''
    if len(sys.argv) == 1:
        print(__doc__)
        parser.print_help()
        sys.exit(1)
    return parser.parse_args()


def main():
    args = parse_args()

    # check parameters
    report = args.report
    taxdump = args.taxdump
    if report and taxdump:
        exit('Needs either Kraken report or NCBI taxdump.')
    if not (report or taxdump):
        exit('Needs either Kraken report or NCBI taxdump.')
    if taxdump:
        if not isdir(taxdump):
            exit(f'Invalid taxdump directory: {taxdump}.')
        for fname in ('nodes.dmp', 'names.dmp'):
            if not isfile(join(taxdump, fname)):
                exit(f'Required file {fname} not found in taxdump directory.')

    if report is not None:
        tree, rankd, named = parse_kraken_report(report)
    else:
        tree, rankd, named = parse_ncbi_taxdump(taxdump)

    get_ranks_ = lru_cache(maxsize=128)(partial(
        get_ranks, tree=tree, rankd=rankd))

    out = args.output
    print('ID', '\t'.join(ranks), file=out)
    for line in args.input:
        c, seq, tid, _ = line.rstrip('\r\n').split('\t', 3)
        if c == 'C':
            row = []
            for tid in get_ranks_(tid).values():
                row.append(named[tid] if tid else '')
            print(seq, '\t'.join(row), file=out)


def parse_kraken_report(fh):
    """Convert a Kraken report file into a taxonomy tree.

    Parameters
    ----------
    fh : file handle
        Kraken report file.

    Returns
    -------
    dict
        TaxID-to-parent mapping.
    dict
        TaxID-to-rank mapping.
    dict
        TaxID-to-name mapping.
    """
    tree, rankd, named, posd, tids = {}, {}, {}, {}, []
    ctid, cpos = None, 0
    for line in fh:
        _, _, _, rank, tid, name = line.rstrip().split('\t')
        if rank in codes:
            rank = codes[rank]
        rankd[tid] = rank
        pos = len(name)
        name = name.lstrip()
        named[tid] = name
        pos -= len(name)
        if pos > cpos:
            tree[tid] = ctid
        else:
            tree[tid] = None
            for tid_ in tids[::-1]:
                if posd[tid_] < pos:
                    tree[tid] = tid_
                    break
        ctid, cpos = tid, pos
        posd[tid] = pos
        tids.append(tid)
    return tree, rankd, named


def parse_ncbi_taxdump(dir):
    """Convert NCBI taxdump into a taxonomy tree.

    Parameters
    ----------
    dir : str
        NCBI taxdump directory.

    Returns
    -------
    dict
        TaxID-to-parent mapping.
    dict
        TaxID-to-rank mapping.
    dict
        TaxID-to-name mapping.
    """
    tree, rankd, named = {}, {}, {}    
    with open(join(dir, 'nodes.dmp'), 'r') as f:
        for line in f:
            x = line.rstrip('\r\n').replace('\t|', '').split('\t')
            tid = x[0]
            pid = x[1]
            if pid == tid:
                pid = None
            tree[tid] = pid
            rank = x[2]
            if rank == 'superkingdom':
                rank = 'domain'
            rankd[tid] = rank
    with open(join(dir, 'names.dmp'), 'r') as f:
        for line in f:
            x = line.rstrip('\r\n').replace('\t|', '').split('\t')
            if x[3] == 'scientific name':
                named[x[0]] = x[1]
    return tree, rankd, named


def get_ranks(tid, tree, rankd):
    res = {x: '' for x in ranks}
    cid = tid
    pid = None
    while True:
        rank = rankd[cid]
        if rank in ranks:
            res[rank] = cid
        pid = tree[cid]
        if pid is None:
            break
        cid = pid
    return res


if __name__ == "__main__":
    main()
